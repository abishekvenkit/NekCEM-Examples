c-----------------------------------------------------------------------
c
c     Normally-incident plane wave striking a dielectric interface.
c
c-----------------------------------------------------------------------
       subroutine userinc(tt,incfhx,incfhy,incfhz,incfex,incfey,incfez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      common /userincident/ ninc,incindex(lxzfl)
      integer ninc,incindex

      real tt
      real incfhx(lxzfl),incfhy(lxzfl),incfhz(lxzfl)
      real incfex(lxzfl),incfey(lxzfl),incfez(lxzfl)

      integer i,j,k
      real yy,eps,mu,eta,uinc,omega

      omega = 3.01069

      do i = 1,ninc
         j = incindex(i)
         k = cemface(j)
         eps = permittivity(k)
         mu = permeability(k)
         eta = sqrt(mu/eps)
         uinc = sin(-omega*tt)
         incfhx(j) = incfhx(j)+uinc
         incfey(j) = incfey(j)+eta*uinc
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine userini(tt,hx,hy,hz,ex,ey,ez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      real tt
      real hx(lpts),hy(lpts),hz(lpts)
      real ex(lpts),ey(lpts),ez(lpts)

      return
      end
c-----------------------------------------------------------------------
      subroutine usersol(tt,solhx,solhy,solhz,solex,soley,solez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      real tt
      real solhx(lpts),solhy(lpts),solhz(lpts)
      real solex(lpts),soley(lpts),solez(lpts)

      return
      end
c-----------------------------------------------------------------------
      subroutine usersrc(tt,srchx,srchy,srchz,srcex,srcey,srcez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      real tt
      real srchx(lpts),srchy(lpts),srchz(lpts)
      real srcex(lpts),srcey(lpts),srcez(lpts)

      return
      end
c-----------------------------------------------------------------------
      subroutine userfsrc(tt,srcfhx,srcfhy,srcfhz,srcfex,srcfey,srcfez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      real tt
      real srcfhx(lxzfl),srcfhy(lxzfl),srcfhz(lxzfl)
      real srcfex(lxzfl),srcfey(lxzfl),srcfez(lxzfl)

      return
      end
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,iel)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'PML'

      common /userincident/ ninc,incindex(lxzfl)
      integer ninc,incindex

      common /usermaterial/ material(lelt)
      integer material

      integer ix,iy,iz,iel

      logical markinc
      integer i,e,f,j,k   
      

       do e=1,nelt
         if (material(e).eq.2) then
            do i = 1,nxyz
              j = i+nxyz*(e-1)
              permittivity(j) = 130 
              permeability(j) = 1.0 
            enddo
         else
            do i = 1,nxyz
              j = i+nxyz*(e-1)
              permittivity(j) = 1.96
              permeability(j) = 1.0 
            enddo               
         endif
      enddo

c     Where incident field needs to be added

      ninc = 0
      do e = 1,nelt
         do f = 1,nfaces
            markinc = .true.
            do i = 1,nxzf
c     j is the global face number
               j = (e-1)*nxzf*nfaces+nxzf*(f-1)+i
c     k is the volume global number associated with face j.
               k = cemface(j)
               if (pmltag(e).eq.0
     $              .or.abs(pmlinner(6)-zm1(k,1,1,1)).gt.1e-8) then
                  markinc = .false.
                  exit
               endif
            enddo
            if (markinc) then
               do i = 1,nxzf
                  ninc = ninc+1
                  j = (e-1)*nxzf*nfaces+nxzf*(f-1)+i
                  incindex(ninc) = j
               enddo
            endif
         enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
c-----------------------------------------------------------------------
      implicit none

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
c-----------------------------------------------------------------------
c     Use this subroutine to set the dimensions of the domain.
      implicit none
      include 'SIZE'
      include 'TOTAL'

      common /usermaterial/ material(lelt)
      integer material

      integer e,ic,ix,iy,nx1_2
      integer cylcount,ncyl,ncylx,ncyly
      real xx,yy,zz,rr
      real xc0,yc0,xcurr,cylgap
      real center(2,10)

c     Get the midpoint index
      nx1_2 = nx1/2

c     The total amount of cylinders is ncyl
c     ncylx is size of cylinder array in x direction, ncyly in y direction
      ncyl = 100
      ncylx = 10
      ncyly = 10

c     gap between the center of two cylinders is cylgap
      cylgap = 1.2087

c     Creating array with cylinder center points
c     ic is the index in cylinder center array

      ic = 1
      do ix = 1,ncylx
         xcurr = cylgap*(ix-1)
      	 do iy = 1,ncyly
           center(1,ic) = xcurr
           center(2,ic) = cylgap*(iy-1)
	   ic = ic+1
	 enddo					
      enddo

    
      do e = 1,nelt
        xx = xm1(nx1_2,nx1_2,nx1_2,e)
        yy = ym1(nx1_2,nx1_2,nx1_2,e)
        zz = zm1(nx1_2,nx1_2,nx1_2,e)

        material(e)=1

        do ic = 1,ncyl
          xc0 = center(1,ic)
          yc0 = center(2,ic)
          rr = (xx-xc0)**2+(yy-yc0)**2
          rr = sqrt(rr)

          if (rr.lt.0.5) then
            if (abs(zz).lt.0.25) then
              material(e)=2
            endif
          endif

       enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      common /ccpu/  cpu_t,cpu_dtime,cpu_chk
      real cpu_t,cpu_dtime,cpu_chk

      real cpu_p_t
      real l2(6),linf(6)

      if (istep.le.10.or.mod(istep,iocomm).eq.0) then
         call usersol
     $     (time,shn(1,1),shn(1,2),shn(1,3),sen(1,1),sen(1,2),sen(1,3))
         call cem_error(hn(1,1),shn(1,1),errhn(1,1),npts,l2(1),linf(1))
         call cem_error(hn(1,2),shn(1,2),errhn(1,2),npts,l2(2),linf(2))
         call cem_error(hn(1,3),shn(1,3),errhn(1,3),npts,l2(3),linf(3))
         call cem_error(en(1,1),sen(1,1),erren(1,1),npts,l2(4),linf(4))
         call cem_error(en(1,2),sen(1,2),erren(1,2),npts,l2(5),linf(5))
         call cem_error(en(1,3),sen(1,3),erren(1,3),npts,l2(6),linf(6))

         call userprint(istep,time,dt,l2,linf,cpu_t,cpu_p_t)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userprint(istep,tt,dt,l2,linf,t1,t2)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'

      integer istep
      real tt,dt,t1,t2
      real l2(6),linf(6)

      integer k

      if (nid.eq.0) then
         write(6,101) istep,nelt,nx1-1,npts,tt,dt,(l2(k),k=1,6),t1,t2
         write(6,102) istep,nelt,nx1-1,npts,tt,dt,(linf(k),k=1,6),t1,t2
      endif

 101  format(/,i10,i6,i4,i9,1p9e10.3,e9.2,' CPU: L2')
 102  format(  i10,i6,i4,i9,1p9e10.3,e9.2,' CPU: Linf')

      return
      end
c-----------------------------------------------------------------------
